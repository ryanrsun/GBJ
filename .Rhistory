param_list <- parse_input(test_stats=test_stats, cor_mat=cor_mat,
pairwise_cors=pairwise_cors)
parse_input
t_vec <- sort(abs(test_stats), decreasing=TRUE)
d <- length(t_vec)
# Sometimes test stats are too big for R's precision
too_big <- which(t_vec > 8.2)
if (length(too_big) > 0) {t_vec[too_big] <- 8.2}
# Did they specify correlations?
if (is.null(cor_mat) & is.null(pairwise_cors)) {
stop("You must specify either cor_mat or pairwise_cors!")
}
# cor_mat specification gets priority
if (!is.null(cor_mat)) {
if(!isSymmetric(cor_mat)) {
stop("You did not specify a symmetric correlation matrix")
}
# Put the correlation matrix into pairwise_cor
pairwise_cor <- cor_mat[upper.tri(cor_mat)]
}
d
pairwise_cor
length(pairwise_cor)
d*(d-1)/2
document()
build()
build()
buid9)
build()
install.github('ryanrsun/GBJ')
install_github('ryanrsun/GBJ')
calc_score_stats
library(devtools)
install_github('ryanrsun/GBJ')
vignette()
vignette(package=GBJ)
vignette(package="GBJ")
setwd('/users/ryansun/desktop')
install.packages(repos=NULL, type='source', 'GBJ_0.1.0.tar.gz')
vignettes(packages='GBJ')
vignette(package="GBJ")
GBJ_tutorial
vignette("GBJ_tutorial", package="GBJ")
?BJ
?GBJ
library(GBJ)
?BJ
set.seed(100)
Z_vec <- rnorm(5) + rep(1,5)
cor_Z <- matrix(data=0.2, nrow=5, ncol=5)
diag(cor_Z) <- 1
BJ(test_stats=Z_vec, cor_mat=cor_Z)
?GBJ
set.seed(100)
Z_vec <- rnorm(5) + rep(1,5)
cor_Z <- matrix(data=0.2, nrow=5, ncol=5)
diag(cor_Z) <- 1
GBJ(test_stats=Z_vec, cor_mat=cor_Z)
?GHC
set.seed(100)
Z_vec <- rnorm(5) + rep(1,5)
cor_Z <- matrix(data=0.2, nrow=5, ncol=5)
diag(cor_Z) <- 1
GHC(test_stats=Z_vec, cor_mat=cor_Z)
?HC
set.seed(100)
Z_vec <- rnorm(5) + rep(1,5)
cor_Z <- matrix(data=0.2, nrow=5, ncol=5)
diag(cor_Z) <- 1
HC(test_stats=Z_vec, cor_mat=cor_Z)
?minP
set.seed(100)
Z_vec <- rnorm(5) + rep(1,5)
cor_Z <- matrix(data=0.2, nrow=5, ncol=5)
diag(cor_Z) <- 1
minP(test_stats=Z_vec, cor_mat=cor_Z)
100^(-0.75)
library(devtools)
install_github('GBJ', username='ryanrsun')
install_github('GBJ', 'ryanrsun')
install_github('ryanrsun/GBJ')
vignette('GBJ_tutorial')
vignettes()
vignette()
?vignette
help.start()
help.start('GBJ')
help.start("GBJ")
help(package="GBJ")
install_github('ryanrsun/GBJ', build_vignettes=TRUE)
install_github('ryanrsun/GBJ', build_vignettes=TRUE, force=TRUE)
vignette("GBJ_tutorial")
of sets
set_names <- paste('Set', 1:1300, sep='')
gene_lists <- matrix(data=1:13000, nrow=1300, ncol=10)
gene_sets <- data.frame(set_name=set_names)
gene_sets <- cbind(gene_sets, gene_lists)
head(gene_sets)
# Run the analysis on ER-/HER2- cohort first, about 500 patients
mm_ind <- which(st=='ER-/HER2-')
length(mm_ind)
dat_mm <- dat.st[mm,]
time_mm <- time[mm]
event_mm <- event[mm]
setwd('/users/ryansun/downloads')
load('Breast.Rdata')
# Run the analysis on ER-/HER2- cohort first, about 500 patients
mm_ind <- which(st=='ER-/HER2-')
length(mm_ind)
dat_mm <- dat.st[mm,]
time_mm <- time[mm]
event_mm <- event[mm]
dat_mm <- dat.st[mm_ind,]
time_mm <- time[mm_ind]
event_mm <- event[mm_ind]
head(time_mm)
dim(gene_sets)
gene_sets <- gene_sets[1:10, ]
pathway_it=1
columns_to_use <- gene_sets[pathway_it, 2:ncol(gene_sets)]
NA_col <- which(is.na(columns_to_use))
columns_to_use
NA_col
test_stats <- rep(NA, length(columns_to_use))
gene_it=1
temp_gene_ind <- columns_to_use[gene_it]
temp_gene_ind
temp_exp <- dat_mm[,temp_gene_it]
temp_exp <- dat_mm[,temp_gene_ind]
head(dat_mm)
dim(dat_mm)
dat_mm[1:5,1:5]
class(dat_mm)
ell = dat_mm[,1]
head(ell)
temp_gene_ind
columns_to_use
class(temp_gene_ind)
temp_gene_ind <- as.numeric(columns_to_use[gene_it])
temp_gene_ind
temp_exp <- dat_mm[ ,temp_gene_ind]
dim(temp_exp)
head(temp_exp)
temp_mod <- coxph(Surv(time=time_mm,event=event_mm)~temp_exp)
library(survival)
temp_mod <- coxph(Surv(time=time_mm,event=event_mm)~temp_exp)
temp_mod
summary(temp_mod)
summary(temp_mod)$coefficients
summary(temp_mod)$coefficients[1,4]
library(GBJ)
dim(dat_mm)
pathway_it=1
# Pick out columns in dat.st to use
columns_to_use <- gene_sets[pathway_it, 2:ncol(gene_sets)]
NA_col <- which(is.na(columns_to_use))
if (length(NA_col) > 0) {columns_to_use <- columns_to_use[-NA_col]}
# Do univariate coxph model on each columns
# Also save the exp columns to get the correlations
test_stats <- rep(NA, length(columns_to_use))
exp_mat <- matrix(data=NA, nrow=nrow(dat_mm), ncol=length(columns_to_use))
for (gene_it in 1:length(columns_to_use))
{
temp_gene_ind <- as.numeric(columns_to_use[gene_it])
temp_exp <- dat_mm[ ,temp_gene_ind]
temp_mod <- coxph(Surv(time=time_mm,event=event_mm)~temp_exp)
test_stats[gene_it] <- summary(temp_mod)$coefficients[1, 4]
exp_mat[, gene_it] <- temp_exp
}
# Apply GBJ and GHC
cor_mat <- cor(exp_mat)
GBJ_list <- GBJ(test_stats=test_stats, cor_mat=cor_mat)
GHC_list <- GBJ(test_stats=test_stats, cor_mat=cor_mat)
GBJ_list
GHC_list
GHC_list <- GHC(test_stats=test_stats, cor_mat=cor_mat)
GHC_list
# Now just apply GBJ and GHC to each one
gene_sets <- gene_sets[1:10, ]
GOF_results <- matrix(data=NA, nrow=nrow_gene_sets, ncol=2)
colnames(GOF_results) <- c('GBJ', 'GBJ_p', 'GHC', 'GHC_p')
for (pathway_it in 1:nrow(gene_sets)) {
# Pick out columns in dat.st to use
columns_to_use <- gene_sets[pathway_it, 2:ncol(gene_sets)]
NA_col <- which(is.na(columns_to_use))
if (length(NA_col) > 0) {columns_to_use <- columns_to_use[-NA_col]}
# Do univariate coxph model on each columns
# Also save the exp columns to get the correlations
test_stats <- rep(NA, length(columns_to_use))
exp_mat <- matrix(data=NA, nrow=nrow(dat_mm), ncol=length(columns_to_use))
for (gene_it in 1:length(columns_to_use))
{
temp_gene_ind <- as.numeric(columns_to_use[gene_it])
temp_exp <- dat_mm[ ,temp_gene_ind]
temp_mod <- coxph(Surv(time=time_mm,event=event_mm)~temp_exp)
test_stats[gene_it] <- summary(temp_mod)$coefficients[1, 4]
exp_mat[, gene_it] <- temp_exp
}
# Apply GBJ and GHC
cor_mat <- cor(exp_mat)
GBJ_list <- GBJ(test_stats=test_stats, cor_mat=cor_mat)
GHC_list <- GHC(test_stats=test_stats, cor_mat=cor_mat)
# Record
GOF_results$GBJ[pathway_it] <- GBJ_list$GBJ
GOF_results$GBJ_p[pathway_it] <- GBJ_list$GBJ_pvalue
GOF_results$GHC[pathway_it] <- GHC_list$GHC
GOF_results$GHC_p[pathway_it] <- GHC_list$GHC_pvalue
}
# Now just apply GBJ and GHC to each one
gene_sets <- gene_sets[1:10, ]
GOF_results <- matrix(data=NA, nrow=nrow_gene_sets, ncol=4)
colnames(GOF_results) <- c('GBJ', 'GBJ_p', 'GHC', 'GHC_p')
for (pathway_it in 1:nrow(gene_sets)) {
# Pick out columns in dat.st to use
columns_to_use <- gene_sets[pathway_it, 2:ncol(gene_sets)]
NA_col <- which(is.na(columns_to_use))
if (length(NA_col) > 0) {columns_to_use <- columns_to_use[-NA_col]}
# Do univariate coxph model on each columns
# Also save the exp columns to get the correlations
test_stats <- rep(NA, length(columns_to_use))
exp_mat <- matrix(data=NA, nrow=nrow(dat_mm), ncol=length(columns_to_use))
for (gene_it in 1:length(columns_to_use))
{
temp_gene_ind <- as.numeric(columns_to_use[gene_it])
temp_exp <- dat_mm[ ,temp_gene_ind]
temp_mod <- coxph(Surv(time=time_mm,event=event_mm)~temp_exp)
test_stats[gene_it] <- summary(temp_mod)$coefficients[1, 4]
exp_mat[, gene_it] <- temp_exp
}
# Apply GBJ and GHC
cor_mat <- cor(exp_mat)
GBJ_list <- GBJ(test_stats=test_stats, cor_mat=cor_mat)
GHC_list <- GHC(test_stats=test_stats, cor_mat=cor_mat)
# Record
GOF_results$GBJ[pathway_it] <- GBJ_list$GBJ
GOF_results$GBJ_p[pathway_it] <- GBJ_list$GBJ_pvalue
GOF_results$GHC[pathway_it] <- GHC_list$GHC
GOF_results$GHC_p[pathway_it] <- GHC_list$GHC_pvalue
}
pathway_it
GOF_results
# Now just apply GBJ and GHC to each one
gene_sets <- gene_sets[1:10, ]
GOF_results <- matrix(data=NA, nrow=nrow_gene_sets, ncol=4)
colnames(GOF_results) <- c('GBJ', 'GBJ_p', 'GHC', 'GHC_p')
GOF_results <- matrix(data=NA, nrow=nrow(gene_sets), ncol=4)
# Now just apply GBJ and GHC to each one
gene_sets <- gene_sets[1:10, ]
GOF_results <- matrix(data=NA, nrow=nrow(gene_sets), ncol=4)
colnames(GOF_results) <- c('GBJ', 'GBJ_p', 'GHC', 'GHC_p')
for (pathway_it in 1:nrow(gene_sets)) {
# Pick out columns in dat.st to use
columns_to_use <- gene_sets[pathway_it, 2:ncol(gene_sets)]
NA_col <- which(is.na(columns_to_use))
if (length(NA_col) > 0) {columns_to_use <- columns_to_use[-NA_col]}
# Do univariate coxph model on each columns
# Also save the exp columns to get the correlations
test_stats <- rep(NA, length(columns_to_use))
exp_mat <- matrix(data=NA, nrow=nrow(dat_mm), ncol=length(columns_to_use))
for (gene_it in 1:length(columns_to_use))
{
temp_gene_ind <- as.numeric(columns_to_use[gene_it])
temp_exp <- dat_mm[ ,temp_gene_ind]
temp_mod <- coxph(Surv(time=time_mm,event=event_mm)~temp_exp)
test_stats[gene_it] <- summary(temp_mod)$coefficients[1, 4]
exp_mat[, gene_it] <- temp_exp
}
# Apply GBJ and GHC
cor_mat <- cor(exp_mat)
GBJ_list <- GBJ(test_stats=test_stats, cor_mat=cor_mat)
GHC_list <- GHC(test_stats=test_stats, cor_mat=cor_mat)
# Record
GOF_results$GBJ[pathway_it] <- GBJ_list$GBJ
GOF_results$GBJ_p[pathway_it] <- GBJ_list$GBJ_pvalue
GOF_results$GHC[pathway_it] <- GHC_list$GHC
GOF_results$GHC_p[pathway_it] <- GHC_list$GHC_pvalue
}
pathway_it
GOF_results
GOF_results$GBJ[pathway_it] <- GBJ_list$GBJ
GOF_results <- data.frame( matrix(data=NA, nrow=nrow(gene_sets), ncol=4) )
# Now just apply GBJ and GHC to each one
gene_sets <- gene_sets[1:10, ]
GOF_results <- data.frame( matrix(data=NA, nrow=nrow(gene_sets), ncol=4) )
colnames(GOF_results) <- c('GBJ', 'GBJ_p', 'GHC', 'GHC_p')
for (pathway_it in 1:nrow(gene_sets)) {
# Pick out columns in dat.st to use
columns_to_use <- gene_sets[pathway_it, 2:ncol(gene_sets)]
NA_col <- which(is.na(columns_to_use))
if (length(NA_col) > 0) {columns_to_use <- columns_to_use[-NA_col]}
# Do univariate coxph model on each columns
# Also save the exp columns to get the correlations
test_stats <- rep(NA, length(columns_to_use))
exp_mat <- matrix(data=NA, nrow=nrow(dat_mm), ncol=length(columns_to_use))
for (gene_it in 1:length(columns_to_use))
{
temp_gene_ind <- as.numeric(columns_to_use[gene_it])
temp_exp <- dat_mm[ ,temp_gene_ind]
temp_mod <- coxph(Surv(time=time_mm,event=event_mm)~temp_exp)
test_stats[gene_it] <- summary(temp_mod)$coefficients[1, 4]
exp_mat[, gene_it] <- temp_exp
}
# Apply GBJ and GHC
cor_mat <- cor(exp_mat)
GBJ_list <- GBJ(test_stats=test_stats, cor_mat=cor_mat)
GHC_list <- GHC(test_stats=test_stats, cor_mat=cor_mat)
# Record
GOF_results$GBJ[pathway_it] <- GBJ_list$GBJ
GOF_results$GBJ_p[pathway_it] <- GBJ_list$GBJ_pvalue
GOF_results$GHC[pathway_it] <- GHC_list$GHC
GOF_results$GHC_p[pathway_it] <- GHC_list$GHC_pvalue
}
GOF_results
setwd('/users/ryansun/downloads')
install.packages('wetransfer-8b8c15/MetaGxOvarian_0.99.0.tar.gz', repos=NULL, type='source')
install.packages("Biobase")
source("https://bioconductor.org/biocLite.R")
biocLite
biocLite()
install.packages('wetransfer-8b8c15/MetaGxOvarian_0.99.0.tar.gz', repos=NULL, type='source')
?MetaGxOvarian
data()
data(package = .packages(all.available = TRUE))
data(GSE19829)
load(SE19829)
load(GSE19829)
load('GSE19829')
?GSE19829
?GSE9891
library(MetaGxOvarian)
?GSE9891
data('GSE9891')
load('GSE9891')
head(SE9891)
head(GSE9891)
data(KNex)
load('KNex')
data()
data('SW')
data('geneData')
View(geneData)
load("~/Downloads/wetransfer-8b8c15/MetaGxOvarian/data/GSE12418.rda")
dim(GSE12418)
head(GSE12418)
?GSE12418
knitr::opts_chunk$set(eval=TRUE,cache=TRUE)
install.packages("MetaGxOvarian")
library(xtable)
library(knitr)
library(tools)
source(system.file("extdata", "patientselection.config", package="MetaGxOvarian"))
min.number.of.genes <- 0
rm(remove.duplicates)
source(system.file("extdata", "createEsetList.R", package="MetaGxOvarian"))
library(genefilter)
install.packages("genefilter")
biocLite("genefilter")
source(system.file("extdata", "createEsetList.R", package="MetaGxOvarian"))
biocLite("logging")
source(system.file("extdata", "createEsetList.R", package="MetaGxOvarian"))
unload("lattice")
detach("package:lattice", unload=TRUE)
detach("package:Matrix", unload=TRUE)
detach("package:matrix", unload=TRUE)
source(system.file("extdata", "createEsetList.R", package="MetaGxOvarian"))
detach("package:Matrix", unload=TRUE)
unload("Matrix")
library(xtable)
library(knitr)
library(tools)
library(MetaGxOvarian)
source(system.file("extdata", "patientselection.config", package="MetaGxOvarian"))
min.number.of.genes <- 0
rm(remove.duplicates)
source(system.file("extdata", "createEsetList.R", package="MetaGxOvarian"))
@
dim(GSE12470)
numSamples <- NULL
for(i in 1:length(esets)){
numSamples <- c(numSamples, length(sampleNames(esets[[i]])))
}
numSamples
SampleNumberSummaryAll <- data.frame(NumberOfSamples = numSamples, row.names = names(esets))
total <- sum(SampleNumberSummaryAll[,"NumberOfSamples"])
SampleNumberSummaryAll <- rbind(SampleNumberSummaryAll, total)
rownames(SampleNumberSummaryAll)[nrow(SampleNumberSummaryAll)] <- "Total"
table(SampleNumberSummaryAll)
pDataID <- c("sample_type", "histological_type", "primarysite", "summarygrade", "summarystage",
"tumorstage", "grade", "age_at_initial_pathologic_diagnosis", "pltx", "tax", "neo",
"days_to_tumor_recurrence", "recurrence_status", "days_to_death", "vital_status")
pDataPercentSummaryTable <- NULL
pDataSummaryNumbersTable <- NULL
for(e in 1:length(esets)){
eset <- esets[[e]]
pDataPercentSummary <- NULL
pDataSummaryNumbers <- NULL
for(p in 1:length(pDataID)){
pDataSummaryNumbers <- c(pDataSummaryNumbers,
sum(!is.na(pData(eset)[,pDataID[p]])))
pDataPercentSummary <- c(pDataPercentSummary,
(sum(!is.na(pData(eset)[,pDataID[p]]))/nrow(pData(eset)))*100)
}
if(e == 1){
pDataSummaryNumbersTable <- data.frame(test = pDataSummaryNumbers)
pDataPercentSummaryTable <- data.frame(test = pDataPercentSummary)
} else {
pDataPercentSummaryTable <- cbind(pDataPercentSummaryTable,pDataPercentSummary)
pDataSummaryNumbersTable <- cbind(pDataSummaryNumbersTable, pDataSummaryNumbers)
}
}
rownames(pDataSummaryNumbersTable) <- pDataID
rownames(pDataPercentSummaryTable) <- pDataID
colnames(pDataSummaryNumbersTable) <- names(esets)
colnames(pDataPercentSummaryTable) <- names(esets)
pDataSummaryNumbersTable <- rbind(pDataSummaryNumbersTable, total)
rownames(pDataSummaryNumbersTable)[nrow(pDataSummaryNumbersTable)] <- "Total"
# Generate a heatmap representation of the pData
pDataPercentSummaryTable<-t(pDataPercentSummaryTable)
pDataPercentSummaryTable<-cbind(Name=(rownames(pDataPercentSummaryTable)),pDataPercentSummaryTable)
nba<-pDataPercentSummaryTable
gradient_colors = c("#ffffff","#ffffd9","#edf8b1","#c7e9b4","#7fcdbb",
"#41b6c4","#1d91c0","#225ea8","#253494","#081d58")
library(lattice)
nbamat<-as.matrix(nba)
rownames(nbamat)<-nbamat[,1]
nbamat<-nbamat[,-1]
Interval<-as.numeric(c(10,20,30,40,50,60,70,80,90,100))
levelplot(t(nbamat),col.regions=gradient_colors,main="Available Clinical Annotation",
scales=list(x=list(rot=90, cex=0.5), y= list(cex=0.5),key=list(cex=0.2)),
at=seq(from=0,to=100,length=10),cex=0.2, ylab="", xlab="", lattice.options=list(),
colorkey=list(at=as.numeric(factor(c(seq(from=0, to=100, by=10)))),
labels=as.character(c( "0","10%","20%","30%", "40%","50%",
"60%", "70%", "80%","90%", "100%"),
cex=0.2,font=1,col="brown",height=1, width=1.4),
col=(gradient_colors)))
head(GSE12470)
?GSE12470
?GSE12470_eset
data(GSE12470_eset)
data( GSE12470_eset )
GSE12470
GSE12470_eset
esets
esets[[1]]
ell = esets[[1]]
pData(ell)
names(pdata(ell))
names(pData(ell))
pData(ell)$sample_type
pData(ell)$days_to_death
pData(ell)$unique_patient_ID
sData(ell)
names(ell)
ell
fData(ell)
head(fData(ell))
names(fData(ell))
ell
experimentData(ell)
aData(ell)
exprs(ell)
head(exprs(ell))
gene_sets
# We need a list of sets
set_names <- paste('Set', 1:1300, sep='')
gene_lists <- matrix(data=1:13000, nrow=1300, ncol=10)
gene_sets <- data.frame(set_name=set_names)
gene_sets <- cbind(gene_sets, gene_lists)
head(gene_sets)
# Run the analysis on ER-/HER2- cohort first, about 500 patients
mm_ind <- which(st=='ER-/HER2-')
length(mm_ind)
dat_mm <- dat.st[mm_ind,]
time_mm <- time[mm_ind]
event_mm <- event[mm_ind]
# Now just apply GBJ and GHC to each one
gene_sets <- gene_sets[1:10, ]
GOF_results <- data.frame( matrix(data=NA, nrow=nrow(gene_sets), ncol=6) )
colnames(GOF_results) <- c('Pathway_Name', 'GBJ', 'GBJ_p', 'GHC', 'GHC_p', 'Num_Genes')
load('Breast.Rdata')
setwd('/users/ryansun/downloads')
load('Breast.Rdata')
# Run the analysis on ER-/HER2- cohort first, about 500 patients
mm_ind <- which(st=='ER-/HER2-')
length(mm_ind)
dat_mm <- dat.st[mm_ind,]
time_mm <- time[mm_ind]
event_mm <- event[mm_ind]
GOF_results[,1] <- gene_sets[,1]
GOF_results[,3] <- runif(n=nrow(GOF_results))
GOF_results[,5] <- runif(n=nrow(GOF_results))
names(pData(ell))
table(SampleNumberSummaryAll)
vignette('GBJ_tutorial')
set.seed(1000)
cancer_status <- c(rep(1,100), rep(0,100))
genotype_data <- matrix(data=rbinom(n=200*50, size=2, prob=0.3), nrow=200)
age <- round( runif(n=200, min=30, max=80) )
gender <- rbinom(n=200, size=1, prob=0.5)     # Let 1 denote a female and 0 a male
age
gedner
gender
genotype_data
null_mod <- glm(cancer_status~age+gender, family=binomial(link="logit"))
log_reg_stats <- calc_score_stats(null_model=null_mod, factor_matrix=genotype_data, model_type="logistic")
library(GBJ)
log_reg_stats <- calc_score_stats(null_model=null_mod, factor_matrix=genotype_data, model_type="logistic")
log_reg_stats
names(pData(ell))
pdata(ell)$histologicaltype
pData(ell)$histological_type
table(SampleNumberSummaryAll)
